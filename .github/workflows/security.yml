name: Security and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一次安全扫描
    - cron: '0 2 * * 1'

jobs:
  # 依赖安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run safety check
      run: |
        uv add --dev safety
        uv run safety check --json || echo "⚠️ 发现潜在安全问题"

    - name: Run bandit security scan
      run: |
        uv add --dev bandit
        uv run bandit -r src/ -f json -o bandit-report.json || echo "⚠️ 发现潜在安全问题"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 7

  # 代码复杂度分析
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run complexity analysis
      run: |
        uv add --dev radon
        uv run radon cc src/ --min=B --show-complexity
        uv run radon mi src/ --min=B

    - name: Run maintainability index
      run: |
        uv run radon mi src/ --show --min=B

  # 代码覆盖率检查
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Create necessary directories
      run: |
        mkdir -p reports
        mkdir -p data
        mkdir -p cache
        mkdir -p htmlcov

    - name: Run tests with coverage
      run: |
        uv run pytest tests/test_ci.py tests/test_config/ tests/test_services/ \
          --cov=src/arxiv_follow \
          --cov-report=term \
          --cov-report=html:htmlcov \
          --cov-report=xml \
          --cov-fail-under=20 \
          -v || echo "⚠️ 某些测试失败，但继续执行"
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: security-workflow
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 7

  # 许可证检查
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Check licenses
      run: |
        uv add --dev pip-licenses
        uv run pip-licenses --format=json --output-file=licenses.json
        uv run pip-licenses --summary

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  # SAST (Static Application Security Testing)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 依赖漏洞扫描
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 汇总安全检查结果
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, complexity-analysis, coverage-check, license-check]
    if: always()
    permissions:
      contents: read
    
    steps:
    - name: Security check summary
      run: |
        echo "🔒 安全检查汇总结果:"
        echo "- 依赖安全扫描: ${{ needs.security-scan.result }}"
        echo "- 代码复杂度分析: ${{ needs.complexity-analysis.result }}"
        echo "- 覆盖率检查: ${{ needs.coverage-check.result }}"
        echo "- 许可证检查: ${{ needs.license-check.result }}"
        
        if [[ "${{ needs.security-scan.result }}" == "success" && \
              "${{ needs.complexity-analysis.result }}" == "success" && \
              "${{ needs.coverage-check.result }}" == "success" && \
              "${{ needs.license-check.result }}" == "success" ]]; then
          echo "✅ 所有安全检查通过！"
        else
          echo "⚠️ 部分安全检查有问题，请查看详细报告"
        fi 