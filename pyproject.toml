[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "arxiv-follow"
version = "1.0.0"
description = "现代化ArXiv论文监控系统 - 支持AI增强分析、研究者跟踪和智能推荐"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ArXiv Follow Team", email = "team@arxiv-follow.dev"}
]
requires-python = ">=3.11"
keywords = ["arxiv", "research", "papers", "monitoring", "ai", "analysis"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core dependencies
    "httpx>=0.28.1",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.7.0",
    
    # CLI and UI
    "click>=8.1.0",
    "rich>=13.9.0",
    "typer>=0.15.0",
    
    # AI and Analysis
    "openai>=1.58.0",
    
    # Date and time handling
    "python-dateutil>=2.9.0",
    
    # Configuration
    "python-dotenv>=1.0.0",
    
    # Async support
    "anyio>=4.8.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    
    # Code quality
    "black>=24.12.0",
    "ruff>=0.8.0",
    "mypy>=1.14.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    
    # Pre-commit hooks
    "pre-commit>=4.0.0",
]

test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-click>=0.8.0",
]

[project.scripts]
arxiv-follow = "arxiv_follow.cli.main:app"

[project.urls]
Homepage = "https://github.com/ox01024/arxiv_follow"
Repository = "https://github.com/ox01024/arxiv_follow.git"
Issues = "https://github.com/ox01024/arxiv_follow/issues"
Documentation = "https://ox01024.github.io/arxiv_follow/"

[tool.hatch.build.targets.wheel]
packages = ["src/arxiv_follow"]

# Code formatting and linting
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
  | vibe_coding
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "vibe_coding",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

# Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/arxiv_follow",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Security configuration
[tool.bandit]
exclude_dirs = ["tests", "vibe_coding"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests.py"]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.16.1",
    "ruff>=0.12.1",
]
