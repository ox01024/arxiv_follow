---
description:
globs:
alwaysApply: false
---
---
description: ArXiv 论文监控系统 Python 编程规范和最佳实践
alwaysApply: true
---

# ArXiv 论文监控系统编程规范

## 📝 代码风格和注释

### 中文注释要求
- **模块文档字符串**: 使用中文三引号文档字符串，简洁描述模块功能
- **函数文档字符串**: 使用中文，包含Args、Returns说明
- **行内注释**: 重要逻辑使用中文注释解释
- **配置和常量**: 使用中文注释说明用途

```python
"""
每日论文监控脚本 - 搜索研究者当天发布的论文
"""

def fetch_researchers_from_tsv(url: str) -> List[Dict[str, Any]]:
    """
    从 TSV URL 获取研究者数据
    
    Args:
        url: Google Sheets TSV 导出链接
        
    Returns:
        研究者数据列表
    """
```

### 代码结构
- **导入顺序**: 标准库 → 第三方库 → 本地模块
- **类型注解**: 必须使用类型提示，特别是函数参数和返回值
- **常量命名**: 使用大写字母和下划线
- **配置集中**: 所有配置放在config.py中
- **TDD开发**: 必须先写测试再写实现代码
- **代码质量**: 所有代码必须通过 `ruff check` 检查

## 🔧 技术栈规范

### HTTP 请求 (httpx)
- 使用httpx库进行HTTP请求
- 设置超时时间和重试机制
- 使用context manager管理连接
- 处理重定向和错误状态

```python
with httpx.Client(follow_redirects=True, timeout=REQUEST_TIMEOUT) as client:
    response = client.get(url)
    response.raise_for_status()
```

### 错误处理
- 使用具体的异常类型
- 提供中文错误信息
- 记录错误日志便于调试
- 优雅降级，不让单个失败影响整体流程

```python
try:
    # 核心逻辑
    pass
except httpx.RequestError as e:
    print(f"网络请求错误: {e}")
    return []
except Exception as e:
    print(f"处理数据时出错: {e}")
    return []
```

### 数据处理
- 使用typing模块进行类型声明
- 字典和列表使用类型注解
- 处理空值和边界情况
- 数据验证和清洗

```python
from typing import List, Dict, Any, Optional

def process_data(raw_data: List[str]) -> Dict[str, Any]:
    """处理原始数据并返回结构化结果"""
```

## 🌐 Web 爬虫和解析

### HTML 解析
- 使用正则表达式解析HTML (现有模式)
- 提供多种解析模式作为fallback
- 处理HTML编码和特殊字符
- 提取关键信息：标题、作者、链接、ID

```python
# 尝试多种解析模式
title_patterns = [
    r'<p class="title is-5 mathjax">\s*<a[^>]*>(.*?)</a>',
    r'<span class="title"[^>]*>(.*?)</span>',
    # ... 更多模式
]

for pattern in title_patterns:
    match = re.search(pattern, html_content, re.DOTALL)
    if match:
        title = re.sub(r'<[^>]+>', '', match.group(1)).strip()
        break
```

### URL 构建
- 使用urllib.parse.urlencode构建查询参数
- 参数化配置搜索条件
- 支持日期范围和多字段搜索

## 🔌 API 集成

### 外部 API 调用
- 集成失败时提供fallback机制
- 使用可选导入处理依赖缺失
- API配置集中管理
- 提供详细的状态反馈

```python
# 优雅处理可选功能
try:
    from dida_integration import create_arxiv_task
except ImportError:
    print("⚠️ 无法导入滴答清单集成模块，相关功能将被禁用")
    def create_arxiv_task(*args, **kwargs):
        return {"success": False, "error": "模块未导入"}
```

### 配置管理
- 所有配置放在config.py中
- 使用字典结构组织相关配置
- 提供默认值和备选方案
- 支持环境变量覆盖
- **维护原则**：定期清理未使用的配置项，保持配置简洁，只保留实际使用的配置

## 📊 数据输出和显示

### 控制台输出
- 使用Emoji增强可读性
- 中文提示信息
- 结构化显示结果
- 提供统计信息

```python
print("🔍 每日论文监控 - 获取研究者当天发布的论文")
print(f"✅ 找到 {len(papers)} 篇新论文!")
```

### 日期处理
- 使用datetime模块
- 支持日期回退策略
- 处理时区转换
- 智能日期范围调整

## 🧪 测试驱动开发和质量

### TDD 开发流程（强制要求）
- **红-绿-重构循环**: 先写失败测试 → 最小代码实现 → 重构优化
- **测试先行**: 任何新功能都必须先写测试
- **小步迭代**: 每次只实现一个小功能点

```python
# 示例：添加日期回退功能的TDD流程

# 1. 先写测试（红色阶段）
def test_search_with_date_fallback():
    """测试搜索失败时的日期回退策略"""
    result = search_papers_with_fallback("cs.AI", "2025-01-01")
    assert result["success"] == True
    assert result["fallback_days"] > 0  # 期望使用了回退策略

# 2. 最小实现（绿色阶段）
def search_papers_with_fallback(topic, date):
    return {"success": True, "fallback_days": 7}

# 3. 完整实现（重构阶段）
def search_papers_with_fallback(topic, date):
    # 实现真正的搜索和回退逻辑
    papers = search_papers(topic, date)
    if not papers:
        papers = search_papers(topic, get_fallback_date(date, 7))
        return {"success": True, "papers": papers, "fallback_days": 7}
    return {"success": True, "papers": papers, "fallback_days": 0}
```

### 代码质量要求
- **Ruff检查**: 所有代码必须通过 `ruff check` 无错误
- **测试覆盖**: 核心功能必须有对应测试
- **类型检查**: 建议使用mypy进行类型验证

### 代码组织
- 每个主要功能独立文件
- 共享配置和工具函数复用
- 模块职责单一明确
- 支持命令行参数

## 🚀 部署和自动化

### GitHub Actions
- 支持定时执行
- 环境变量管理敏感信息
- 错误处理和通知
- 支持手动触发

### 依赖管理
- 使用uv作为包管理器
- pyproject.toml配置项目信息
- 最小化依赖，只包含必需库
- 指定Python版本要求
- **维护原则**：定期移除不再使用的依赖，保持导入语句简洁，及时更新过时的模块引用

## 💡 特定业务逻辑

### ArXiv 搜索优化
- 智能日期回退策略（精确日期 → 7天 → 30天 → 不限日期）
- 多主题组合搜索支持
- 论文去重和排序
- 搜索结果统计

### 数据源集成
- Google Sheets TSV解析
- 灵活的数据格式处理
- 自动检测表头和数据行
- 支持多列和单列格式

当编写这个项目的代码时，请严格遵循以上规范，确保代码的一致性、可维护性和中文友好性。
