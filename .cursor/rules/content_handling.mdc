---
description:
globs:
alwaysApply: false
---
# 内容处理规则

## 🚫 强制命令：禁止内容截断

**重要：这是一个强制性规则，必须严格遵守**

### 规则内容
- **绝对禁止**对项目中的任何内容进行截断
- **绝对禁止**限制内容长度
- **绝对禁止**使用任何形式的内容裁剪、省略或缩短

### 适用范围
- 论文摘要和内容
- 翻译服务的输入和输出
- 任务创建的详细信息
- 搜索结果的展示
- 日志输出
- 文档内容
- 用户数据
- 系统生成的任何文本内容

### 实施要求
1. 所有内容必须**完整保留**
2. 如遇到长度限制问题，必须**提高限制**而不是截断内容
3. 如遇到技术限制，必须**寻找替代方案**而不是截断
4. 任何代码中不得包含内容长度限制逻辑
5. 不得使用 `[:n]` 或类似的截断操作
6. 不得添加 `...` 或省略标记

### 违规处理
- 任何截断行为都被视为违规
- 发现截断逻辑必须立即移除
- 必须确保所有功能在完整内容下正常工作

### 🧪 测试程序例外条款

**以下情况允许内容截断，但仅限于测试和演示目的：**

#### 允许截断的文件类型
- `test_*.py` - 所有测试文件
- `demo_*.py` - 所有演示文件
- `*_test.py` - 测试程序
- `*_demo.py` - 演示程序

#### 允许的截断场景
1. **测试输出展示** - 为了测试结果的可读性
2. **日志预览** - 测试过程中的日志截断显示
3. **演示效果** - 演示程序中为了展示效果的内容预览
4. **调试信息** - 调试过程中的信息截断
5. **测试验证** - 验证功能是否正常工作的内容采样

#### 测试截断的使用规范
- 必须使用 `[:n]...` 格式明确标识截断
- 必须在注释中说明截断原因：`# 测试展示截断`
- 不得影响实际功能的完整性
- 截断仅用于显示，不得用于数据处理

#### 示例代码
```python
# ✅ 允许 - 测试文件中的展示截断
def test_content_display():
    content = get_long_content()
    print(f"内容预览: {content[:100]}...")  # 测试展示截断

# ❌ 禁止 - 主程序中的截断
def create_task_content():
    content = get_long_content()
    return content[:500]  # 违规！主程序不得截断
```

### 特殊情况
- 如果外部API有长度限制，必须分批处理而不是截断
- 如果显示有限制，使用分页或滚动而不是截断
- 如果存储有限制，必须扩展存储容量而不是截断

### 🎯 核心原则
**在主要功能代码中：完整性比简洁性更重要！**
**在测试演示代码中：可读性和演示效果可以适度截断！**
