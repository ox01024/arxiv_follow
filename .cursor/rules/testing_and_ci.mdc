---
description: 
globs: 
alwaysApply: false
---
# 测试和 CI/CD 工作流规范

## 🧪 测试驱动开发 (TDD) 规范

### TDD 开发流程
**必须严格遵循 TDD 三步循环**：
1. **红色阶段 (Red)**: 先写测试，确保测试失败
2. **绿色阶段 (Green)**: 编写最少代码让测试通过
3. **重构阶段 (Refactor)**: 优化代码但保持测试通过

```python
# 步骤1: 先写测试 (会失败)
def test_fetch_papers_with_date_fallback():
    """测试日期回退策略功能"""
    # 测试精确日期无结果时自动回退到7天
    papers = fetch_papers_with_fallback("cs.AI", "2025-01-01")
    assert len(papers) >= 0  # 初始测试，预期会失败
    assert "fallback_used" in papers[0]  # 期待的数据结构

# 步骤2: 编写最少代码让测试通过
def fetch_papers_with_fallback(topic, date):
    return [{"fallback_used": True}]  # 最简实现

# 步骤3: 重构优化
def fetch_papers_with_fallback(topic, date):
    # 完整实现日期回退逻辑
    pass
```

### 测试文件结构
- 测试文件命名：`test_<功能模块>.py`
- 测试函数命名：`test_<具体功能>()`
- 使用中文注释描述测试目的和期望行为
- 测试外部API时提供mock机制
- **TDD要求**: 功能代码前必须先有对应测试

```python
def test_dida_integration():
    """测试滴答清单API集成功能"""
    # 测试成功场景
    result = create_arxiv_task("测试任务", "测试内容")
    assert result["success"] == True
    
    # 测试失败场景处理
    # ...
```

### 测试类型
- **单元测试**: 测试单个函数和方法
- **集成测试**: 测试API集成和外部服务
- **功能测试**: 测试完整的工作流程
- **CI测试**: 验证GitHub Actions工作流

### 测试维护原则
- **自动清理**: 测试任务应自动清理，避免堆积
- **清晰输出**: 提供清晰的测试输出和状态反馈
- **错误信息**: 测试失败时提供有用的错误信息和调试线索
- **及时更新**: 配置变更时及时更新相关测试文件

## 🔄 GitHub Actions 规范

### 工作流文件命名
- 主要功能：`<功能名>.yml` (如 `daily_papers.yml`)
- 测试流程：`ci.yml` 或 `test.yml`
- 部署流程：`deploy.yml`

### 工作流原则
- 包含质量检查和业务逻辑两个阶段
- 支持定时执行和手动触发
- 中国时区适配：UTC 01:00, 04:00, 14:00 对应中国时间 09:00, 12:00, 22:00

### 环境变量管理
- 敏感信息使用 GitHub Secrets
- 配置变量使用 GitHub Variables
- 本地开发支持 `.env` 文件

## 📦 依赖管理 (UV)

### 依赖管理原则
- 使用 uv 作为包管理器
- 分离开发依赖和生产依赖
- 只包含必需的依赖包

## 🔍 代码质量检查

### 静态分析工具 (必须通过)
- **ruff check**: 主要代码检查工具，必须无错误通过
- **ruff format**: 代码格式化，替代black
- 类型检查建议使用 mypy（可选）

### Ruff 配置原则
- 目标 Python 版本：3.11
- 行长度：88字符
- 启用主要代码检查规则（E, W, F, I, N, UP, B, C4, SIM）
- 测试文件允许更宽松的命名规则

### 代码质量要求
- **提交前检查**: 所有代码必须通过 `ruff check` 无错误
- **格式化要求**: 使用 `ruff format` 进行代码格式化
- **CI检查**: GitHub Actions中自动运行ruff检查

## 🚀 部署和监控

### 自动化执行
- 定时任务使用 cron 表达式
- 支持手动触发
- 错误时发送通知

### 日志和错误处理
- 使用中文日志信息，包含时间戳
- 网络请求失败时实现重试机制
- 数据解析失败时提供回退方案

遵循这些规范能确保项目的稳定性和可维护性。
